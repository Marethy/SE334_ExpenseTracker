import { config } from "dotenv";
import pg from "pg";
import { drizzle } from "drizzle-orm/node-postgres";
import { createId } from "@paralleldrive/cuid2";
import { accounts, categories, subscriptions, transactions } from "@/db/schema";

config({ path: ".env.local" });

const getDatabaseUrl = () => {
  const url = process.env.DRIZZLE_DATABASE_URL;
  if (!url) {
    throw new Error("DRIZZLE_DATABASE_URL is not set");
  }
  console.log("üîå Database URL:", url.replace(/:[^:@]*@/, ":***@"));
  return url;
};

const pool = new pg.Pool({
  connectionString: getDatabaseUrl(),
  max: 10,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

const db = drizzle(pool);

const YOUR_USER_ID = "user_2z9DHMW3UKpwza1orMSp2eYZWyK";

const accountSeed = [
  { id: createId(), name: "T√†i kho·∫£n Vietcombank", userId: YOUR_USER_ID },
  { id: createId(), name: "T√†i kho·∫£n ti·∫øt ki·ªám BIDV", userId: YOUR_USER_ID },
  { id: createId(), name: "Th·∫ª t√≠n d·ª•ng Techcombank", userId: YOUR_USER_ID },
  { id: createId(), name: "V√≠ MoMo", userId: YOUR_USER_ID },
  { id: createId(), name: "V√≠ ZaloPay", userId: YOUR_USER_ID },
  { id: createId(), name: "Ti·ªÅn m·∫∑t", userId: YOUR_USER_ID },
];

const categorySeed = [
  { id: createId(), name: "ƒÇn u·ªëng", userId: YOUR_USER_ID },
  { id: createId(), name: "ƒêi l·∫°i", userId: YOUR_USER_ID },
  { id: createId(), name: "Mua s·∫Øm", userId: YOUR_USER_ID },
  { id: createId(), name: "Gi·∫£i tr√≠", userId: YOUR_USER_ID },
  { id: createId(), name: "H√≥a ƒë∆°n & Ti·ªán √≠ch", userId: YOUR_USER_ID },
  { id: createId(), name: "Y t·∫ø", userId: YOUR_USER_ID },
  { id: createId(), name: "Du l·ªãch", userId: YOUR_USER_ID },
  { id: createId(), name: "Gi√°o d·ª•c", userId: YOUR_USER_ID },
  { id: createId(), name: "Sinh ho·∫°t ph·∫©m", userId: YOUR_USER_ID },
  { id: createId(), name: "XƒÉng xe", userId: YOUR_USER_ID },
  { id: createId(), name: "C√† ph√™ & ƒê·ªì u·ªëng", userId: YOUR_USER_ID },
  { id: createId(), name: "D·ªãch v·ª• tr·ª±c tuy·∫øn", userId: YOUR_USER_ID },
  { id: createId(), name: "Qu√† t·∫∑ng & T·ª´ thi·ªán", userId: YOUR_USER_ID },
  { id: createId(), name: "ChƒÉm s√≥c c√° nh√¢n", userId: YOUR_USER_ID },
  { id: createId(), name: "Thu nh·∫≠p", userId: YOUR_USER_ID },
  { id: createId(), name: "Nh√† ·ªü", userId: YOUR_USER_ID },
  { id: createId(), name: "B·∫£o hi·ªÉm", userId: YOUR_USER_ID },
  { id: createId(), name: "Th·ªÉ thao", userId: YOUR_USER_ID },
];

// Subscription cho b·∫°n
const subscriptionSeed = [
  {
    id: createId(),
    userId: YOUR_USER_ID,
    plan: "premium",
    status: "active",
    startDate: new Date("2024-01-01"),
    endDate: new Date("2025-12-31"),
    createdAt: new Date(),
    updatedAt: new Date(),
  },
];

// Function ƒë·ªÉ t·∫°o realistic transaction data cho Vi·ªát Nam
const createTransactionSeed = () => {
  const transactions = [];
  const now = new Date();

  // C√°c lo·∫°i thu nh·∫≠p ph·ªï bi·∫øn ·ªü Vi·ªát Nam
  const incomePayees = [
    "L∆∞∆°ng th√°ng",
    "Th∆∞·ªüng d·ª± √°n",
    "Freelance",
    "Kinh doanh online",
    "ƒê·∫ßu t∆∞",
    "L√†m th√™m",
    "L√£i ti·∫øt ki·ªám",
    "B√°n h√†ng",
    "D·∫°y h·ªçc",
    "Thi·∫øt k·∫ø website",
  ];

  // C√°c lo·∫°i chi ti√™u v·ªõi category t∆∞∆°ng ·ª©ng (s·ªë ti·ªÅn theo VND)
  const expenseData = [
    {
      payees: [
        "Highlands Coffee",
        "Starbucks",
        "C·ªông C√† Ph√™",
        "Tr√† s·ªØa TocoToco",
        "Ph√∫c Long",
        "C√† ph√™ v·ªâa h√®",
      ],
      category: "C√† ph√™ & ƒê·ªì u·ªëng",
      amountRange: [25000, 120000], // 25k-120k VND
    },
    {
      payees: [
        "Grab Food",
        "ShopeeFood",
        "B√∫n ch·∫£ H∆∞∆°ng Li√™n",
        "Ph·ªü Th√¨n",
        "Lotteria",
        "KFC",
        "McDonald's",
        "Qu√°n c∆°m t·∫•m",
        "Nh√† h√†ng BBQ",
        "Buffet l·∫©u",
      ],
      category: "ƒÇn u·ªëng",
      amountRange: [50000, 800000], // 50k-800k VND
    },
    {
      payees: [
        "Vinmart",
        "Co.opmart",
        "Big C",
        "Lotte Mart",
        "Mega Market",
        "Circle K",
        "FamilyMart",
        "Ch·ª£ B·∫øn Th√†nh",
      ],
      category: "Sinh ho·∫°t ph·∫©m",
      amountRange: [100000, 2000000], // 100k-2M VND
    },
    {
      payees: [
        "Grab Bike",
        "Grab Car",
        "Be",
        "Gojek",
        "Xe bu√Ωt",
        "Xe √¥m",
        "Taxi Mai Linh",
        "Vinasun",
      ],
      category: "ƒêi l·∫°i",
      amountRange: [15000, 300000], // 15k-300k VND
    },
    {
      payees: ["Petrolimex", "Shell", "Caltex", "VinFast", "BP", "Total"],
      category: "XƒÉng xe",
      amountRange: [200000, 1500000], // 200k-1.5M VND
    },
    {
      payees: [
        "Shopee",
        "Lazada",
        "Tiki",
        "Sendo",
        "Vincom",
        "Takashimaya",
        "Saigon Centre",
        "Diamond Plaza",
        "Uniqlo",
        "H&M",
      ],
      category: "Mua s·∫Øm",
      amountRange: [150000, 5000000], // 150k-5M VND
    },
    {
      payees: [
        "Netflix",
        "Spotify",
        "YouTube Premium",
        "VTV Cab",
        "FPT Play",
        "Zing MP3",
        "VIP Karaoke",
      ],
      category: "D·ªãch v·ª• tr·ª±c tuy·∫øn",
      amountRange: [79000, 400000], // 79k-400k VND
    },
    {
      payees: [
        "H√≥a ƒë∆°n ƒëi·ªán EVN",
        "H√≥a ƒë∆°n n∆∞·ªõc",
        "Internet FPT",
        "Viettel",
        "VinaPhone",
        "MobiFone",
        "Ti·ªÅn nh√†",
        "Ph√≠ qu·∫£n l√Ω chung c∆∞",
      ],
      category: "H√≥a ƒë∆°n & Ti·ªán √≠ch",
      amountRange: [300000, 3000000], // 300k-3M VND
    },
    {
      payees: [
        "CGV Cinemas",
        "Lotte Cinema",
        "Galaxy Cinema",
        "Game center",
        "Karaoke Luxury",
        "Bowling",
        "Concert",
        "Nh√† h√°t",
      ],
      category: "Gi·∫£i tr√≠",
      amountRange: [200000, 1500000], // 200k-1.5M VND
    },
    {
      payees: [
        "B·ªánh vi·ªán Ch·ª£ R·∫´y",
        "B·ªánh vi·ªán Ung B∆∞·ªõu",
        "Ph√≤ng kh√°m ƒëa khoa",
        "Nha khoa Paris",
        "Nh√† thu·ªëc Long Ch√¢u",
        "Pharmacity",
        "Guardian",
      ],
      category: "Y t·∫ø",
      amountRange: [100000, 5000000], // 100k-5M VND
    },
    {
      payees: [
        "Vietnam Airlines",
        "VietJet Air",
        "Bamboo Airways",
        "Kh√°ch s·∫°n",
        "Homestay",
        "Tour du l·ªãch",
        "V√© tham quan",
      ],
      category: "Du l·ªãch",
      amountRange: [500000, 15000000], // 500k-15M VND
    },
    {
      payees: [
        "H·ªçc ph√≠ ƒë·∫°i h·ªçc",
        "Kh√≥a h·ªçc online",
        "S√°ch gi√°o khoa",
        "Kho√° h·ªçc ti·∫øng Anh",
        "H·ªçc l√°i xe",
        "Trung t√¢m tin h·ªçc",
      ],
      category: "Gi√°o d·ª•c",
      amountRange: [200000, 10000000], // 200k-10M VND
    },
    {
      payees: [
        "Gym California",
        "Yoga Center",
        "S√¢n tennis",
        "H·ªì b∆°i",
        "S√¢n c·∫ßu l√¥ng",
        "Ph√≤ng t·∫≠p boxing",
      ],
      category: "Th·ªÉ thao",
      amountRange: [100000, 2000000], // 100k-2M VND
    },
    {
      payees: [
        "B·∫£o hi·ªÉm Prudential",
        "B·∫£o Vi·ªát",
        "AIA",
        "Manulife",
        "B·∫£o hi·ªÉm xe m√°y",
        "B·∫£o hi·ªÉm y t·∫ø",
      ],
      category: "B·∫£o hi·ªÉm",
      amountRange: [500000, 5000000], // 500k-5M VND
    },
  ];

  // T·∫°o transactions cho 90 ng√†y qua (3 th√°ng)
  for (let i = 0; i < 90; i++) {
    const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);

    // Random s·ªë l∆∞·ª£ng transactions m·ªói ng√†y (√≠t h∆°n v√†o cu·ªëi tu·∫ßn)
    const isWeekend = date.getDay() === 0 || date.getDay() === 6;
    const numTransactions = isWeekend
      ? Math.floor(Math.random() * 4) + 1 // 1-4 transactions cu·ªëi tu·∫ßn
      : Math.floor(Math.random() * 7) + 2; // 2-8 transactions ng√†y th∆∞·ªùng

    for (let j = 0; j < numTransactions; j++) {
      const isIncome = Math.random() < 0.12; // 12% chance l√† thu nh·∫≠p

      if (isIncome) {
        // T·∫°o income transaction
        const isLargeSalary = Math.random() < 0.1; // 10% chance l∆∞∆°ng l·ªõn

        let amount, payee;
        if (isLargeSalary) {
          amount = Math.floor(Math.random() * 30000000) + 15000000; // 15M-45M VND (l∆∞∆°ng th√°ng)
          payee = "L∆∞∆°ng th√°ng";
        } else {
          amount = Math.floor(Math.random() * 5000000) + 500000; // 500k-5.5M VND
          payee = incomePayees[Math.floor(Math.random() * incomePayees.length)];
        }

        const incomeCategory = categorySeed.find(
          (cat) => cat.name === "Thu nh·∫≠p"
        );

        transactions.push({
          id: createId(),
          amount: amount.toString(),
          payee,
          notes: "Thu nh·∫≠p",
          date,
          accountId:
            accountSeed[Math.floor(Math.random() * accountSeed.length)].id,
          categoryId: incomeCategory?.id || null,
        });
      } else {
        // T·∫°o expense transaction
        const expenseType =
          expenseData[Math.floor(Math.random() * expenseData.length)];
        const payee =
          expenseType.payees[
            Math.floor(Math.random() * expenseType.payees.length)
          ];
        const amount = -(
          Math.floor(
            Math.random() *
              (expenseType.amountRange[1] - expenseType.amountRange[0])
          ) + expenseType.amountRange[0]
        );
        const category = categorySeed.find(
          (cat) => cat.name === expenseType.category
        );

        transactions.push({
          id: createId(),
          amount: amount.toString(),
          payee,
          notes: `Chi ti√™u ${expenseType.category}`,
          date,
          accountId:
            accountSeed[Math.floor(Math.random() * accountSeed.length)].id,
          categoryId: category?.id || null,
        });
      }
    }

    // Th√™m v√†i chi ti√™u l·ªõn ƒë·∫∑c bi·ªát (ti·ªÅn nh√†, etc.)
    if (Math.random() < 0.03) {
      // 3% chance m·ªói ng√†y
      const largeExpenses = [
        {
          payee: "Ti·ªÅn thu√™ nh√†",
          amount: -(Math.floor(Math.random() * 8000000) + 5000000), // 5M-13M VND
          category: "Nh√† ·ªü",
        },
        {
          payee: "Mua xe m√°y",
          amount: -(Math.floor(Math.random() * 50000000) + 20000000), // 20M-70M VND
          category: "Mua s·∫Øm",
        },
        {
          payee: "S·ª≠a ch·ªØa nh√†",
          amount: -(Math.floor(Math.random() * 15000000) + 5000000), // 5M-20M VND
          category: "Nh√† ·ªü",
        },
      ];

      const largeExpense =
        largeExpenses[Math.floor(Math.random() * largeExpenses.length)];
      const category = categorySeed.find(
        (cat) => cat.name === largeExpense.category
      );

      transactions.push({
        id: createId(),
        amount: largeExpense.amount.toString(),
        payee: largeExpense.payee,
        notes: "Chi ti√™u l·ªõn",
        date,
        accountId: accountSeed[2].id, // Th·∫ª t√≠n d·ª•ng
        categoryId: category?.id || null,
      });
    }
  }

  return transactions;
};

async function seed() {
  try {
    console.log("üîÑ B·∫Øt ƒë·∫ßu seed database...");
    console.log(`üë§ T·∫°o d·ªØ li·ªáu cho user: ${YOUR_USER_ID}`);

    // Test connection
    const client = await pool.connect();
    console.log("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng");
    client.release();

    console.log("üßπ X√≥a d·ªØ li·ªáu c≈©...");
    await db.delete(transactions).execute();
    await db.delete(subscriptions).execute();
    await db.delete(categories).execute();
    await db.delete(accounts).execute();
    console.log("‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu c≈©");

    console.log("üå± T·∫°o t√†i kho·∫£n...");
    await db.insert(accounts).values(accountSeed).execute();
    console.log(`‚úÖ ƒê√£ t·∫°o ${accountSeed.length} t√†i kho·∫£n`);

    console.log("üå± T·∫°o danh m·ª•c...");
    await db.insert(categories).values(categorySeed).execute();
    console.log(`‚úÖ ƒê√£ t·∫°o ${categorySeed.length} danh m·ª•c`);

    console.log("üå± T·∫°o subscription...");
    await db.insert(subscriptions).values(subscriptionSeed).execute();
    console.log(`‚úÖ ƒê√£ t·∫°o ${subscriptionSeed.length} subscription`);

    console.log("üå± T·∫°o giao d·ªãch...");
    const transactionSeed = createTransactionSeed();

    // Insert transactions theo batch
    const batchSize = 100;
    for (let i = 0; i < transactionSeed.length; i += batchSize) {
      const batch = transactionSeed.slice(i, i + batchSize);
      await db.insert(transactions).values(batch).execute();
      console.log(
        `   üì¶ ƒê√£ t·∫°o batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(transactionSeed.length / batchSize)}`
      );
    }
    console.log(`‚úÖ ƒê√£ t·∫°o ${transactionSeed.length} giao d·ªãch`);

    console.log("\nüéâ Seed ho√†n th√†nh!");
    console.log("üìä T√≥m t·∫Øt d·ªØ li·ªáu:");
    console.log(`   üë§ User: ${YOUR_USER_ID}`);
    console.log(
      `   üè¶ ${accountSeed.length} t√†i kho·∫£n (Vietcombank, BIDV, MoMo, ZaloPay...)`
    );
    console.log(
      `   üìÇ ${categorySeed.length} danh m·ª•c (ƒÇn u·ªëng, ƒêi l·∫°i, Y t·∫ø...)`
    );
    console.log(`   üíé ${subscriptionSeed.length} subscription (Premium)`);
    console.log(`   üí∞ ${transactionSeed.length} giao d·ªãch`);
    console.log(`   üìÖ D·ªØ li·ªáu: 90 ng√†y g·∫ßn nh·∫•t`);
    console.log(`   üíµ Ti·ªÅn t·ªá: VND (Vi·ªát Nam ƒê·ªìng)`);

    console.log("\nüöÄ B√¢y gi·ªù b·∫°n c√≥ th·ªÉ:");
    console.log("   ‚Ä¢ ƒêƒÉng nh·∫≠p v√†o ·ª©ng d·ª•ng");
    console.log("   ‚Ä¢ Xem dashboard v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø");
    console.log("   ‚Ä¢ Test t·∫•t c·∫£ t√≠nh nƒÉng v·ªõi giao d·ªãch VND");
    console.log("   ‚Ä¢ Xem bi·ªÉu ƒë·ªì thu chi 3 th√°ng qua");
  } catch (err) {
    console.error("‚ùå Seed th·∫•t b·∫°i:", err);
    process.exit(1);
  } finally {
    await pool.end();
    console.log("üîê ƒê√£ ƒë√≥ng k·∫øt n·ªëi database");
  }
}

// Ch·∫°y seed
seed();
