from langchain_openai import ChatOpenAI
from langchain_community.utilities import SQLDatabase
from langchain_community.agent_toolkits.sql.base import create_sql_agent
from langchain_community.agent_toolkits.sql.toolkit import SQLDatabaseToolkit
from langchain.agents.agent_types import AgentType
from typing import Dict, Any, List
import logging
from app.database.database import db_service
from textwrap import dedent
import os

logger = logging.getLogger(__name__)

class FinancialSQLAgent:
    def __init__(self, api_key: str, base_url: str = "https://api.x.ai/v1"):
        """Initialize SQL agent for financial data analysis"""

        # Setup Grok LLM
        self.llm = ChatOpenAI(
            model="grok-3-mini",
            api_key=api_key,
            base_url=base_url,
            temperature=0.1,
            max_tokens=1200,  # Increase for better analysis
            timeout=30
        )

        # Create SQL database connection
        self.db = SQLDatabase.from_uri(
            db_service.database_url,
            include_tables=['accounts', 'categories', 'transactions', 'subscriptions'],
            sample_rows_in_table_info=3,  # Increase samples
            view_support=False,
            max_string_length=150
        )

        # Create SQL toolkit
        self.toolkit = SQLDatabaseToolkit(db=self.db, llm=self.llm, reduce_k_below_max_tokens=True)

        # Create the SQL agent with better parameters
        self.agent = create_sql_agent(
            llm=self.llm,
            toolkit=self.toolkit,
            agent_type=AgentType.OPENAI_FUNCTIONS,
            verbose=False,
            max_iterations=3,  # Allow more iterations
            max_execution_time=30,
            early_stopping_method="generate",
            return_intermediate_steps=False
        )

        self._system_context = self._build_system_context()

    def _build_system_context(self) -> str:
        """Build comprehensive system context"""
        return dedent(f"""\
            ## H·ªá th·ªëng Ph√¢n t√≠ch T√†i ch√≠nh Ti·∫øng Vi·ªát

            **Schema Database:**
            {db_service.get_schema_description()}

            **Quy t·∫Øc SQL QUAN TR·ªåNG:**
            1. **LU√îN LU√îN** filter theo user_id:
                ```sql
                JOIN accounts a ON t.account_id = a.id
                WHERE a.user_id = 'USER_ID_HERE'
                ```
            2. **X·ª≠ l√Ω s·ªë ti·ªÅn:** CAST(amount AS DECIMAL) cho t√≠nh to√°n
            3. **Quy ∆∞·ªõc:** amount > 0 = thu nh·∫≠p, amount < 0 = chi ti√™u
            4. **Format output:** Ti·∫øng Vi·ªát, s·ªë ti·ªÅn c√≥ ƒë∆°n v·ªã VND
            5. **Tr·∫£ v·ªÅ:** Markdown format v·ªõi headers, tables, lists

            **Template Response Markdown:**
            ```markdown
            ## üìä Ph√¢n t√≠ch Chi ti√™u Th√°ng n√†y

            ### T·ªïng quan
            - **T·ªïng chi ti√™u:** 5,200,000 VND
            - **So v·ªõi th√°ng tr∆∞·ªõc:** +15% ‚¨ÜÔ∏è

            ### Top 5 Danh m·ª•c Chi ti√™u
            | Danh m·ª•c | S·ªë ti·ªÅn | S·ªë giao d·ªãch | T·ª∑ l·ªá |
            |----------|---------|--------------|-------|
            | ƒÇn u·ªëng | 2,100,000 VND | 45 | 40% |
            | Di chuy·ªÉn | 800,000 VND | 22 | 15% |

            ### üí° Khuy·∫øn ngh·ªã
            1. **T·ªëi ∆∞u chi ti√™u ƒÉn u·ªëng** - Ti·∫øt ki·ªám 500,000 VND
            2. **S·ª≠ d·ª•ng giao th√¥ng c√¥ng c·ªông** - Gi·∫£m 30% chi ph√≠ di chuy·ªÉn
            ```
        """)

    async def execute_financial_query(
        self,
        user_id: str,
        question: str,
        system_prompt: str = None
    ) -> Dict[str, Any]:
        """Execute financial query with enhanced user context"""
        try:
            # Build comprehensive query with user context
            enhanced_query = self._build_enhanced_query(user_id, question)

            # Execute with error handling
            result = await self._execute_with_enhanced_retry(enhanced_query)

            # Parse and format result
            parsed_result = self._parse_result_with_markdown(result, user_id)

            return {
                "success": True,
                "data": parsed_result,
                "tokens_saved": True,
                "execution_time": "optimized",
                "user_id": user_id
            }
        except Exception as e:
            logger.error(f"SQL Agent error for user {user_id}: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "data": self._generate_fallback_response(user_id, question),
                "user_id": user_id
            }

    def _build_enhanced_query(self, user_id: str, question: str) -> str:
        """Build enhanced query with user context and examples"""
        return dedent(f"""\
            {self._system_context}

            **User ID:** {user_id}
            **C√¢u h·ªèi:** {question}

            **Y√™u c·∫ßu c·ª• th·ªÉ:**
            1. T·∫°o SQL query v·ªõi filter user_id = '{user_id}'
            2. Ph√¢n t√≠ch d·ªØ li·ªáu th·ª±c t·ª´ database
            3. Tr·∫£ v·ªÅ response b·∫±ng Markdown format
            4. Bao g·ªìm s·ªë li·ªáu c·ª• th·ªÉ v√† th·ªëng k√™
            5. ƒê∆∞a ra khuy·∫øn ngh·ªã thi·∫øt th·ª±c

            **V√≠ d·ª• SQL ƒë√∫ng:**
                ```sql
                SELECT
                    c.name as category_name,
                    COUNT(*) as transaction_count,
                    SUM(ABS(CAST(t.amount AS DECIMAL))) as total_amount
                FROM transactions t
                JOIN accounts a ON t.account_id = a.id
                LEFT JOIN categories c ON t.category_id = c.id
                WHERE a.user_id = '{user_id}'
                    AND CAST(t.amount AS DECIMAL) < 0
                    AND t.date >= DATE_TRUNC('month', CURRENT_DATE)
                GROUP BY c.name
                ORDER BY total_amount DESC;
                ```

            H√£y ph√¢n t√≠ch v√† tr·∫£ l·ªùi c√¢u h·ªèi v·ªõi d·ªØ li·ªáu th·ª±c t·ª´ database.
        """)

    async def _execute_with_enhanced_retry(self, query: str, max_retries: int = 2) -> str:
        """Execute query with enhanced retry logic"""
        last_error = None

        for attempt in range(max_retries):
            try:
                logger.info(f"Executing SQL agent query (attempt {attempt + 1})")
                result = await self.agent.ainvoke({"input": query})

                output = result.get("output", "")
                if output and len(output.strip()) > 20:  # Valid response
                    return output

                logger.warning(f"Empty or short response on attempt {attempt + 1}")

            except Exception as e:
                last_error = e
                logger.warning(f"Query attempt {attempt + 1} failed: {str(e)}")

                if attempt < max_retries - 1:
                    # Simplify query for retry
                    query = query.replace("comprehensive", "simple").replace("detailed", "basic")
                    continue

        # If all attempts failed, raise the last error
        if last_error:
            raise last_error
        else:
            raise Exception("SQL agent returned empty response after all retries")

    def _parse_result_with_markdown(self, result: str, user_id: str) -> Dict[str, Any]:
        """Parse result and ensure markdown formatting"""
        if not result or len(result.strip()) < 10:
            return {
                "message": "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho user n√†y",
                "markdown_response": self._generate_no_data_markdown(user_id),
                "summary": "No data available",
                "key_insights": []
            }

        # Ensure result contains markdown formatting
        if not any(marker in result for marker in ["##", "**", "|", "-", "*", "1."]):
            # Convert plain text to markdown
            result = self._convert_to_markdown(result)

        return {
            "message": "Analysis completed",
            "markdown_response": result,
            "summary": result[:200] + "..." if len(result) > 200 else result,
            "key_insights": self._extract_key_insights(result),
            "user_id": user_id
        }

    def _convert_to_markdown(self, text: str) -> str:
        """Convert plain text response to markdown format"""
        lines = text.split('\n')
        markdown_lines = ["## üìä Ph√¢n t√≠ch T√†i ch√≠nh\n"]

        for line in lines:
            line = line.strip()
            if not line:
                continue

            # Convert to markdown list if it looks like a point
            if line.startswith('-') or line.startswith('‚Ä¢'):
                markdown_lines.append(f"- {line[1:].strip()}")
            elif ':' in line and len(line) < 100:
                # Convert key-value pairs to bold
                parts = line.split(':', 1)
                markdown_lines.append(f"**{parts[0].strip()}:** {parts[1].strip()}")
            else:
                markdown_lines.append(line)

        return '\n'.join(markdown_lines)

    def _generate_no_data_markdown(self, user_id: str) -> str:
        """Generate markdown response when no data is found"""
        return dedent(f"""\
            ## üìä Ph√¢n t√≠ch T√†i ch√≠nh
            ### ‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu
            Hi·ªán t·∫°i ch∆∞a c√≥ d·ªØ li·ªáu t√†i ch√≠nh cho t√†i kho·∫£n c·ªßa b·∫°n.
            ### üí° ƒê·ªÉ b·∫Øt ƒë·∫ßu:
            1. **Th√™m t√†i kho·∫£n ng√¢n h√†ng** - K·∫øt n·ªëi ƒë·ªÉ ƒë·ªìng b·ªô giao d·ªãch
            2. **Nh·∫≠p giao d·ªãch th·ªß c√¥ng** - Th√™m thu chi h√†ng ng√†y
            3. **Ph√¢n lo·∫°i giao d·ªãch** - G√°n danh m·ª•c cho t·ª´ng kho·∫£n chi
            ### üì± H∆∞·ªõng d·∫´n
            - Truy c·∫≠p **T√†i kho·∫£n** ƒë·ªÉ th√™m ngu·ªìn t√†i ch√≠nh
            - S·ª≠ d·ª•ng **Th√™m giao d·ªãch** ƒë·ªÉ ghi l·∫°i thu chi
            - Xem **B√°o c√°o** ƒë·ªÉ theo d√µi xu h∆∞·ªõng chi ti√™u
            > Sau khi c√≥ d·ªØ li·ªáu, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c ph√¢n t√≠ch chi ti·∫øt v·ªÅ t√¨nh h√¨nh t√†i ch√≠nh!
        """)

    def _generate_fallback_response(self, user_id: str, question: str) -> Dict[str, Any]:
        """Generate fallback response when SQL agent fails"""
        return {
            "message": "SQL analysis failed",
            "markdown_response": dedent(f"""\
                ## ‚ùå L·ªói Ph√¢n t√≠ch
                Xin l·ªói, c√≥ l·ªói khi ph√¢n t√≠ch c√¢u h·ªèi: **{question}**
                ### üîÑ H√£y th·ª≠:
                1. **ƒê·∫∑t c√¢u h·ªèi ƒë∆°n gi·∫£n h∆°n** - VD: "Chi ti√™u th√°ng n√†y"
                2. **Ki·ªÉm tra d·ªØ li·ªáu** - ƒê·∫£m b·∫£o c√≥ giao d·ªãch trong h·ªá th·ªëng
                3. **Th·ª≠ l·∫°i sau** - H·ªá th·ªëng c√≥ th·ªÉ ƒëang b·∫≠n
                ### üìû H·ªó tr·ª£
                N·∫øu v·∫•n ƒë·ªÅ ti·∫øp t·ª•c, vui l√≤ng li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£.
            """),
            "summary": "Analysis failed due to system error",
            "key_insights": ["L·ªói h·ªá th·ªëng", "C·∫ßn th·ª≠ l·∫°i"],
            "user_id": user_id
        }

    def _extract_key_insights(self, text: str) -> List[str]:
        """Extract key insights from markdown text"""
        insights = []
        lines = text.split('\n')

        for line in lines:
            line = line.strip()
            # Look for bold text (insights)
            if '**' in line:
                # Extract text between ** markers
                import re
                bold_matches = re.findall(r'\*\*(.*?)\*\*', line)
                insights.extend(bold_matches)
            # Look for list items with numbers
            elif line.startswith('- ') or line.startswith('* '):
                insights.append(line[2:].strip())

        return insights[:5]  # Return top 5 insights

# Global agent instance
sql_agent = None

def get_sql_agent() -> FinancialSQLAgent:
    global sql_agent
    if sql_agent is None:
        api_key = os.getenv("XAI_API_KEY")
        if not api_key:
            raise ValueError("XAI_API_KEY environment variable is required")
        sql_agent = FinancialSQLAgent(api_key=api_key)
    return sql_agent